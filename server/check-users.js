// Script pour v√©rifier les utilisateurs dans MongoDB
require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');
const Score = require('./models/Score');

async function checkData() {
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Connect√© √† MongoDB\n');

        const users = await User.find({}).select('-password');
        console.log(`üìä Nombre d'utilisateurs : ${users.length}`);
        console.log('\nüë• UTILISATEURS :');
        users.forEach(user => {
            const adminBadge = user.isAdmin ? 'üëë ADMIN' : 'üë§ USER';
            console.log(`  - ${user.username} (${user.email}) ${adminBadge}`);
            console.log(`    ID: ${user._id}`);
            console.log(`    Cr√©√© le: ${user.createdAt}`);
            console.log(`    isAdmin: ${user.isAdmin}`);
            console.log(`    Stats: ${user.stats.gamesPlayed} parties jou√©es\n`);
        });

        const scores = await Score.find({}).populate('user', 'username').sort('-score').limit(10);
        console.log(`\nüèÜ TOP 10 SCORES :`);
        scores.forEach((score, index) => {
            console.log(`  ${index + 1}. ${score.user?.username || 'Anonyme'} - ${score.score} points (${score.mode})`);
        });

        await mongoose.connection.close();
        console.log('\n‚úÖ D√©connect√©');
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        process.exit(1);
    }
}

checkData();
