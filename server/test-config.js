/**
 * Script de test pour v√©rifier la configuration du serveur
 */

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de la configuration du serveur BlockDrop\n');

// V√©rification du fichier .env
console.log('1Ô∏è‚É£  V√©rification du fichier .env...');
const envPath = path.join(__dirname, '.env');
if (fs.existsSync(envPath)) {
    console.log('   ‚úÖ Fichier .env trouv√©');
    
    // Lecture du contenu
    const envContent = fs.readFileSync(envPath, 'utf-8');
    const requiredVars = ['MONGODB_URI', 'JWT_SECRET', 'PORT', 'NODE_ENV'];
    let allPresent = true;
    
    requiredVars.forEach(varName => {
        if (envContent.includes(varName + '=')) {
            console.log(`   ‚úÖ ${varName} configur√©`);
        } else {
            console.log(`   ‚ùå ${varName} manquant`);
            allPresent = false;
        }
    });
    
    if (!allPresent) {
        console.log('\n   ‚ö†Ô∏è  Veuillez configurer toutes les variables dans .env');
    }
} else {
    console.log('   ‚ùå Fichier .env non trouv√©');
    console.log('   ‚ÑπÔ∏è  Copiez .env.example vers .env et configurez-le');
}

// V√©rification de node_modules
console.log('\n2Ô∏è‚É£  V√©rification des d√©pendances...');
const nodeModulesPath = path.join(__dirname, 'node_modules');
if (fs.existsSync(nodeModulesPath)) {
    console.log('   ‚úÖ node_modules trouv√©');
    
    // V√©rifier les packages principaux
    const requiredPackages = ['express', 'mongoose', 'jsonwebtoken', 'bcryptjs'];
    requiredPackages.forEach(pkg => {
        if (fs.existsSync(path.join(nodeModulesPath, pkg))) {
            console.log(`   ‚úÖ ${pkg} install√©`);
        } else {
            console.log(`   ‚ùå ${pkg} manquant`);
        }
    });
} else {
    console.log('   ‚ùå node_modules non trouv√©');
    console.log('   ‚ÑπÔ∏è  Ex√©cutez: npm install');
}

// V√©rification de la structure des dossiers
console.log('\n3Ô∏è‚É£  V√©rification de la structure...');
const requiredDirs = ['config', 'models', 'routes', 'middleware'];
requiredDirs.forEach(dir => {
    if (fs.existsSync(path.join(__dirname, dir))) {
        console.log(`   ‚úÖ Dossier ${dir}/ pr√©sent`);
    } else {
        console.log(`   ‚ùå Dossier ${dir}/ manquant`);
    }
});

// Test de connexion MongoDB (si .env existe)
if (fs.existsSync(envPath)) {
    console.log('\n4Ô∏è‚É£  Test de connexion MongoDB...');
    require('dotenv').config();
    
    if (process.env.MONGODB_URI) {
        console.log(`   ‚ÑπÔ∏è  URI: ${process.env.MONGODB_URI.replace(/\/\/.*@/, '//***@')}`);
        
        // Tenter la connexion
        const mongoose = require('mongoose');
        mongoose.connect(process.env.MONGODB_URI)
            .then(() => {
                console.log('   ‚úÖ Connexion MongoDB r√©ussie!');
                mongoose.connection.close();
                printSummary(true);
            })
            .catch(err => {
                console.log('   ‚ùå Erreur de connexion MongoDB:');
                console.log(`      ${err.message}`);
                console.log('\n   ‚ÑπÔ∏è  Assurez-vous que MongoDB est lanc√©');
                printSummary(false);
            });
    } else {
        console.log('   ‚ùå MONGODB_URI non configur√©');
        printSummary(false);
    }
} else {
    printSummary(false);
}

function printSummary(mongoOk) {
    console.log('\n' + '='.repeat(50));
    console.log('üìä R√âSUM√â');
    console.log('='.repeat(50));
    
    if (fs.existsSync(envPath) && fs.existsSync(nodeModulesPath) && mongoOk) {
        console.log('‚úÖ Configuration compl√®te!');
        console.log('\nüöÄ Vous pouvez d√©marrer le serveur avec:');
        console.log('   npm run dev');
    } else {
        console.log('‚ö†Ô∏è  Configuration incompl√®te');
        console.log('\nüìù Actions requises:');
        if (!fs.existsSync(envPath)) {
            console.log('   1. Cr√©er le fichier .env √† partir de .env.example');
        }
        if (!fs.existsSync(nodeModulesPath)) {
            console.log('   2. Installer les d√©pendances: npm install');
        }
        if (!mongoOk) {
            console.log('   3. Configurer MongoDB et v√©rifier la connexion');
        }
    }
    console.log('='.repeat(50) + '\n');
}
